// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STAFF_TU
  WALI_KELAS
  STUDENT
  GURU_MAPEL
  STAFF_PIKET
  SATPAM
  ADMIN
}

enum MessageStatus {
  TERKIRIM
  DIBACA
}

enum Status {
  BELUM_HADIR
  HADIR
  TERLAMBAT
  ALPA
  SAKIT
  IZIN
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String
  role           UserRole         @default(STUDENT)
  Class          Class?
  Student        Student?
  SubjectTeacher SubjectTeacher?
  Attendance     Attendance[]
  NotifTeacher   Notif[]          @relation(name: "TeacherNotif")
  NotifStudent   Notif[]          @relation(name: "StudentNotif")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Student {
  id         String       @id @default(uuid())
  userId     String?      @unique
  user       User?        @relation(fields: [userId], references: [id])
  rfid       String       @unique
  nis        String       @unique
  classId    String?
  class      Class?       @relation(fields: [classId], references: [id])
  attendance Attendance[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Class {
  id          String    @id @default(uuid())
  className   String    @unique
  waliKelasId String?   @unique
  waliKelas   User?     @relation(fields: [waliKelasId], references: [id], onDelete: SetNull)
  students    Student[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Attendance {
  id         String    @id @default(uuid())
  studentId  String
  student    Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  date       DateTime  @db.Date
  status     Status    @default(BELUM_HADIR)
  time_in    DateTime?
  createById String?
  createBy   User?     @relation(fields: [createById], references: [id], onDelete: SetNull)
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model SubjectTeacher {
  id        String  @id @default(uuid())
  teacherId String? @unique
  teacher   User?   @relation(fields: [teacherId], references: [id])
  subjects  String
}

model Notif {
  id                String        @id @default(uuid())
  studentId         String?
  student           User?         @relation(fields: [studentId], references: [id], onDelete: Cascade, name: "StudentNotif")
  homeroomTeacherId String?
  homeroomTeacher   User?         @relation(fields: [homeroomTeacherId], references: [id], onDelete: Cascade, name: "TeacherNotif")
  message           String
  status            MessageStatus @default(DIBACA)
  createdAt         DateTime      @default(now())
}

model Date {
  id        String   @id @default(uuid())
  date      DateTime
  desc      String
  createdAt DateTime @default(now())
}
